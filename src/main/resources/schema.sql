-- Создание таблицы пользователей (users)
-- Эта таблица предназначена для хранения информации о зарегистрированных пользователях сервиса.
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Уникальный идентификатор пользователя, автоинкремент.
    email VARCHAR(255) NOT NULL UNIQUE,                             -- Адрес электронной почты пользователя, должен быть уникальным.
    login VARCHAR(255) NOT NULL UNIQUE,                             -- Логин пользователя, должен быть уникальным.
    name VARCHAR(255),                                              -- Отображаемое имя пользователя. Может быть пустым.
    birthday DATE                                                   -- Дата рождения пользователя.
);

-- Создание таблицы жанров (genres)
-- В этой таблице хранятся названия различных жанров фильмов.
CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Уникальный идентификатор жанра, автоинкремент.
    name VARCHAR(255) NOT NULL UNIQUE                               -- Название жанра, должно быть уникальным.
);

-- Создание таблицы рейтингов MPA (mpa_ratings)
-- Эта таблица содержит информацию о возрастных рейтингах фильмов (Motion Picture Association).
CREATE TABLE IF NOT EXISTS mpa_ratings (
    mpa_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Уникальный идентификатор MPA рейтинга, автоинкремент.
    name VARCHAR(255) NOT NULL UNIQUE                               -- Название MPA рейтинга (например, G, PG, PG-13, R, NC-17), должно быть уникальным.
);

-- Создание таблицы фильмов (films)
-- Основная таблица для хранения информации о фильмах.
CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Уникальный идентификатор фильма, автоинкремент.
    name VARCHAR(255) NOT NULL,                                   -- Название фильма, обязательное поле.
    description VARCHAR(200),                                     -- Краткое описание фильма (максимум 200 символов).
    release_date DATE,                                            -- Дата выхода фильма.
    duration INTEGER,                                             -- Продолжительность фильма в минутах.
    mpa_id INTEGER REFERENCES mpa_ratings (mpa_id)                -- Внешний ключ, ссылка на таблицу mpa_ratings.
);

-- Создание таблицы связей фильмов и жанров (film_genres)
-- Эта таблица реализует связь "многие ко многим" между фильмами и жанрами.
CREATE TABLE IF NOT EXISTS film_genres (
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,     -- Внешний ключ, ссылка на films. При удалении фильма, записи здесь удаляются.
    genre_id INTEGER REFERENCES genres (genre_id) ON DELETE CASCADE,  -- Внешний ключ, ссылка на genres. При удалении жанра, записи здесь удаляются.
    PRIMARY KEY (film_id, genre_id)                                   -- Составной первичный ключ обеспечивает уникальность связки фильм-жанр.
);

-- Создание таблицы лайков фильмов пользователями (likes)
-- Эта таблица отслеживает, какие пользователи поставили лайки каким фильмам.
CREATE TABLE IF NOT EXISTS likes (
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE, -- Внешний ключ, ссылка на films. При удалении фильма, его лайки удаляются.
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE, -- Внешний ключ, ссылка на users. При удалении пользователя, его лайки удаляются.
    PRIMARY KEY (film_id, user_id)                                -- Составной первичный ключ обеспечивает уникальность лайка от пользователя к фильму.
);

-- Создание таблицы друзей пользователей (friends)
-- Эта таблица хранит информацию о дружеских связях между пользователями.
CREATE TABLE IF NOT EXISTS friends (
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,     -- Внешний ключ, ссылка на users (инициатор дружбы).
    friend_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,   -- Внешний ключ, ссылка на users (принявший дружбу).
    status BOOLEAN,                                                   -- Статус дружбы (например, TRUE для подтвержденной дружбы, FALSE для запроса).
    PRIMARY KEY (user_id, friend_id)                                  -- Составной первичный ключ обеспечивает уникальность пары друзей.
);
